#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL —á–µ—Ä–µ–∑ Railway API
"""

import requests
import json
from datetime import datetime

# URL Railway API
RAILWAY_API_URL = 'https://emelyanovtgbot-webapp-production.up.railway.app'

def get_database_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        response = requests.get(f'{RAILWAY_API_URL}/api/users')
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return
        
        users = response.json()
        
        if not users:
            print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞!")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = len(users)
        users_with_form = sum(1 for u in users.values() if u.get('form_data'))
        users_without_form = total_users - users_with_form
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        page_stats = {}
        for user_data in users.values():
            page = user_data.get('current_page', 1)
            page_stats[page] = page_stats.get(page, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
        today = datetime.now().date()
        today_users = 0
        for user_data in users.values():
            created_at = user_data.get('created_at')
            if created_at:
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "dd.mm.yyyy HH:MM:SS"
                    date_str = created_at.split()[0]
                    user_date = datetime.strptime(date_str, "%d.%m.%Y").date()
                    if user_date == today:
                        today_users += 1
                except:
                    pass
        
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 50)
        print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        print(f"üìù –ó–∞–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É: {users_with_form}")
        print(f"‚è≥ –ù–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É: {users_without_form}")
        print(f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è: {today_users}")
        
        print(f"\nüìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:")
        for page in sorted(page_stats.keys()):
            print(f"   ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {page_stats[page]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print(f"\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        sorted_users = sorted(users.items(), 
                            key=lambda x: x[1].get('created_at', ''), 
                            reverse=True)[:5]
        
        for user_id, user_data in sorted_users:
            created_at = user_data.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            current_page = user_data.get('current_page', 1)
            has_form = "‚úÖ" if user_data.get('form_data') else "‚ùå"
            print(f"   ‚Ä¢ {user_id} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} | –§–æ—Ä–º–∞ {has_form} | {created_at}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def test_form_submission():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –§–û–†–ú–´")
    print("=" * 50)
    
    test_user_id = f"test_user_{int(datetime.now().timestamp())}"
    test_form_data = {
        "age": "25",
        "occupation": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
        "income": "50000 —Ä—É–±/–º–µ—Å",
        "motivation": "10 –∏–∑ 10",
        "teamwork": "9 –∏–∑ 10"
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        response = requests.post(
            f'{RAILWAY_API_URL}/api/save_form_data',
            headers={'Content-Type': 'application/json'},
            json={
                'user_id': test_user_id,
                'form_data': test_form_data
            }
        )
        
        if response.status_code == 200:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            user_response = requests.get(f'{RAILWAY_API_URL}/api/user/{test_user_id}')
            if user_response.status_code == 200:
                user_data = user_response.json()
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ!")
                print(f"üìÑ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {user_data.get('current_page')}")
                if user_data.get('form_data'):
                    print("üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def main():
    print("üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• RAILWAY")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        health_response = requests.get(f'{RAILWAY_API_URL}/health')
        if health_response.status_code == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    get_database_stats()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
    test_form_submission()

if __name__ == "__main__":
    main() 