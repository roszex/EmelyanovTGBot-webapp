#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Railway
"""

import os
import requests
import json
from datetime import datetime

# URL Railway API
RAILWAY_API_URL = 'https://emelyanovtgbot-webapp-production.up.railway.app'

def get_users_from_api():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.get(f'{RAILWAY_API_URL}/api/users')
        if response.status_code == 200:
            return response.json()
        else:
            print(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return {}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def display_users(users):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    if not users:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    print("=" * 80)
    
    for user_id, user_data in users.items():
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {user_data.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"üìÑ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {user_data.get('current_page', 1)}")
        
        form_data = user_data.get('form_data')
        if form_data:
            print("üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:")
            print(f"   ‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {form_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   ‚Ä¢ –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {form_data.get('occupation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   ‚Ä¢ –î–æ—Ö–æ–¥: {form_data.get('income', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   ‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {form_data.get('motivation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   ‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞: {form_data.get('teamwork', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        else:
            print("üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
        
        print("-" * 40)

def get_user_stats(users):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not users:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return
    
    total_users = len(users)
    users_with_form = sum(1 for u in users.values() if u.get('form_data'))
    avg_page = sum(u.get('current_page', 1) for u in users.values()) / total_users
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    print(f"   ‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É: {users_with_form}")
    print(f"   ‚Ä¢ –ù–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É: {total_users - users_with_form}")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {avg_page:.1f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    page_stats = {}
    for user_data in users.values():
        page = user_data.get('current_page', 1)
        page_stats[page] = page_stats.get(page, 0) + 1
    
    print(f"\nüìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:")
    for page in sorted(page_stats.keys()):
        print(f"   ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {page_stats[page]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

def main():
    print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Railway PostgreSQL...")
    
    users = get_users_from_api()
    
    if users:
        display_users(users)
        get_user_stats(users)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

if __name__ == "__main__":
    main() 