#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á—ë—Ç—á–∏–∫–∞ ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
"""

import os
import psycopg2
from psycopg2.extras import RealDictCursor
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DATABASE_URL = os.getenv('DATABASE_URL')

def get_db_connection():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def reset_id_sequence():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ ID –¥–æ 1"""
    conn = get_db_connection()
    if not conn:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    try:
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('SELECT COUNT(*) FROM users')
        user_count = cursor.fetchone()[0]
        
        logger.info(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ ID –¥–æ 1
        cursor.execute('ALTER SEQUENCE users_id_seq RESTART WITH 1')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π + 1
        if user_count > 0:
            cursor.execute(f'ALTER SEQUENCE users_id_seq RESTART WITH {user_count + 1}')
            logger.info(f"–°—á—ë—Ç—á–∏–∫ ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {user_count + 1}")
        else:
            logger.info("–°—á—ë—Ç—á–∏–∫ ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 1 (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞)")
        
        conn.commit()
        cursor.close()
        conn.close()
        
        logger.info("‚úÖ –°—á—ë—Ç—á–∏–∫ ID —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á—ë—Ç—á–∏–∫–∞ ID: {e}")
        if conn:
            conn.rollback()
            conn.close()
        return False

def show_current_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    if not conn:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    try:
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute('SELECT COUNT(*) as total FROM users')
        total_users = cursor.fetchone()['total']
        
        cursor.execute('SELECT MAX(id) as max_id FROM users')
        max_id_result = cursor.fetchone()
        max_id = max_id_result['max_id'] if max_id_result['max_id'] else 0
        
        cursor.execute('SELECT MIN(id) as min_id FROM users')
        min_id_result = cursor.fetchone()
        min_id = min_id_result['min_id'] if min_id_result['min_id'] else 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        cursor.execute("SELECT nextval('users_id_seq')")
        next_id = cursor.fetchone()[0]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        cursor.execute("SELECT setval('users_id_seq', %s, false)", (next_id - 1,))
        
        logger.info("üìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        logger.info("=" * 50)
        logger.info(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        logger.info(f"üî¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID: {min_id}")
        logger.info(f"üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID: {max_id}")
        logger.info(f"üî¢ –°–ª–µ–¥—É—é—â–∏–π ID –±—É–¥–µ—Ç: {next_id}")
        
        if total_users > 0:
            logger.info(f"üìà –†–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º ID: {max_id - total_users}")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        if conn:
            conn.close()

def optimize_id_sequence():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ID, —á—Ç–æ–±—ã –æ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = get_db_connection()
    if not conn:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    try:
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('SELECT COUNT(*) FROM users')
        user_count = cursor.fetchone()[0]
        
        if user_count == 0:
            # –ï—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∞ 1
            cursor.execute('ALTER SEQUENCE users_id_seq RESTART WITH 1')
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, —Å—á—ë—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 1")
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + 1
            cursor.execute(f'ALTER SEQUENCE users_id_seq RESTART WITH {user_count + 1}')
            logger.info(f"–°—á—ë—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {user_count + 1} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π + 1)")
        
        conn.commit()
        cursor.close()
        conn.close()
        
        logger.info("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ID –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ID: {e}")
        if conn:
            conn.rollback()
            conn.close()
        return False

def main():
    logger.info("üîÑ –°–ë–†–û–° –°–ß–Å–¢–ß–ò–ö–ê ID –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    logger.info("=" * 50)
    
    if not DATABASE_URL:
        logger.error("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("üìä –ü–ï–†–ï–î –°–ë–†–û–°–û–ú:")
    show_current_stats()
    
    print("\n" + "=" * 50)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –°–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ ID –¥–æ 1\n2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç—á–∏–∫ ID (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π + 1)\n3. –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
    
    if choice == "1":
        logger.info("üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ ID –¥–æ 1...")
        if reset_id_sequence():
            logger.info("‚úÖ –°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω!")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ!")
    
    elif choice == "2":
        logger.info("üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫ ID...")
        if optimize_id_sequence():
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏!")
    
    elif choice == "3":
        logger.info("üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    else:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        return
    
    print("\n" + "=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    logger.info("üìä –ü–û–°–õ–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
    show_current_stats()

if __name__ == "__main__":
    main() 